using System;
using System.Collections.Generic;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Bson.Serialization.Options;

namespace ET
{
    [Config]
    public partial class (ConfigName)Category : Singleton<(ConfigName)Category>, IMerge
    {
        [BsonElement]
        [BsonDictionaryOptions(DictionaryRepresentation.ArrayOfArrays)]
        private Dictionary<long, (ConfigName)> dict = new Dictionary<long, (ConfigName)>();
        
        [BsonElement]
        private List<(ConfigName)> list = new List<(ConfigName)>();
		
        public void Merge(object o)
        {
            (ConfigName)Category s = o as (ConfigName)Category;
            
            foreach ((ConfigName) config in list)
            {
                try
                {
                    this.dict.Add(config.Id, config);
                }
                catch (Exception e)
                {
                    //Log.Console($"{config.Id} error:{e}");
	                Log.Error($"数据异常，策划检查多个key是否相同。{key}\n{e}");
                }
                
            }
            
            this.list.Clear();
        }
		
        public (ConfigName) Get(long id)
        {
            this.dict.TryGetValue(id, out (ConfigName) item);

            if (item == null)
            {
                throw new Exception($"配置找不到，配置表名: {nameof ((ConfigName))}，配置id: {id}");
            }

            return item;
        }
        
        private long GetMultiKeyMerge(int a = 0, int b = 0, int c = 0, int d = 0)
        {
	        //合并：高32位-中16位-中8位-低8位
	        return (long)a << 32 | ((long)b << 16) | ((long)c << 8) | (long)d;
        }

        public (ConfigName) GetByKeys(int key1 = 0, int key2 = 0, int key3 = 0, int key4 = 0)
        {
	        long key = GetMultiKeyMerge(key1, key2, key3, key4);
            this.dict.TryGetValue(key, out (ConfigName) item);

            if (item == null)
            {
                throw new Exception($"配置找不到，配置表名: {nameof ((ConfigName))}，配置id: {key1}, {key2}, {key3}, {key4}");
            }

            return item;
	        //return Get(key);
        }
		
		
        public bool Contain(int key1 = 0, int key2 = 0, int key3 = 0, int key4 = 0)
        {
	        long key = GetMultiKeyMerge(key1, key2, key3, key4);
            return this.dict.ContainsKey(key);
        }
		
        public bool Contain(int id)
        {
            return this.dict.ContainsKey(id);
        }

        public Dictionary<long, (ConfigName)> GetAll()
        {
            return this.dict;
        }

        public (ConfigName) GetOne()
        {
            if (this.dict == null || this.dict.Count <= 0)
            {
                return null;
            }
            return this.dict.Values.GetEnumerator().Current;
        }
    }

	public partial class (ConfigName): ProtoObject, IConfig
	{
(Fields)
	}
}
